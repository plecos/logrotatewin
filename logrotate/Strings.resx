<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Copying" xml:space="preserve">
    <value>Copying</value>
  </data>
  <data name="CopyRight" xml:space="preserve">
    <value>Copyright  (C) 2012-2016 Ken Salter</value>
  </data>
  <data name="CouldNotBeFound" xml:space="preserve">
    <value>could not be found</value>
  </data>
  <data name="DebugOptionSet" xml:space="preserve">
    <value>Debug option set to true</value>
  </data>
  <data name="DeletingFile" xml:space="preserve">
    <value>Deleting file</value>
  </data>
  <data name="Executing" xml:space="preserve">
    <value>Executing</value>
  </data>
  <data name="ExecutingFirstAction" xml:space="preserve">
    <value>Executing FirstAction commands</value>
  </data>
  <data name="ExecutingLastAction" xml:space="preserve">
    <value>Executing LastAction commands</value>
  </data>
  <data name="ExecutingPostRotateSharedScripts" xml:space="preserve">
    <value>Executing Postrotate (SharedScripts) commands</value>
  </data>
  <data name="ExecutingPreRotateSharedScripts" xml:space="preserve">
    <value>Executing Prerotate (SharedScripts) commands</value>
  </data>
  <data name="ExtInTaboo" xml:space="preserve">
    <value>extension is in taboo list</value>
  </data>
  <data name="ForceOptionRotate" xml:space="preserve">
    <value>Force option is set, will rotate</value>
  </data>
  <data name="ForceOptionSet" xml:space="preserve">
    <value>Force option set to true</value>
  </data>
  <data name="GlobalOptionsAboveSections" xml:space="preserve">
    <value>Global options must go above sections, ignoring</value>
  </data>
  <data name="GNURights" xml:space="preserve">
    <value>This may be freely redistributed under the terms of the GNU Public License.  </value>
  </data>
  <data name="MailOptionSet" xml:space="preserve">
    <value>-m/--mail option not supported, ignoring</value>
  </data>
  <data name="NoTimestampDirectives" xml:space="preserve">
    <value>No timestamp directives are set true, skipping timestamp checks</value>
  </data>
  <data name="ProcessInclude" xml:space="preserve">
    <value>Process include directive file</value>
  </data>
  <data name="Processing" xml:space="preserve">
    <value>Processing</value>
  </data>
  <data name="ProgramName" xml:space="preserve">
    <value>logrotate</value>
  </data>
  <data name="Renaming" xml:space="preserve">
    <value>Renaming</value>
  </data>
  <data name="ShreddingFile" xml:space="preserve">
    <value>Shredding file</value>
  </data>
  <data name="Skipping" xml:space="preserve">
    <value>Skipping</value>
  </data>
  <data name="To" xml:space="preserve">
    <value> to </value>
  </data>
  <data name="UnknownCmdLineArg" xml:space="preserve">
    <value>unknown command line argument</value>
  </data>
  <data name="UpdateStatus" xml:space="preserve">
    <value>Updating rotation date in status file</value>
  </data>
  <data name="Usage1" xml:space="preserve">
    <value>Usage: logrotate [-d|--debug] [-f|--force]</value>
  </data>
  <data name="Usage2" xml:space="preserve">
    <value>[-s|--state=statefile] [-v|--verbose] [-?|--help] [--usage]</value>
  </data>
  <data name="Usage3" xml:space="preserve">
    <value>&lt;configfile&gt;</value>
  </data>
  <data name="VerboseOptionSet" xml:space="preserve">
    <value>Verbose option set to true</value>
  </data>
  <data name="AddingConfigFile" xml:space="preserve">
    <value>Adding to config files to process</value>
  </data>
  <data name="AlternateStateFile" xml:space="preserve">
    <value>Setting alternate state file to</value>
  </data>
  <data name="Comment" xml:space="preserve">
    <value>comment</value>
  </data>
  <data name="Compressing" xml:space="preserve">
    <value>Compressing rotated log file</value>
  </data>
  <data name="CreateNewEmptyLogFile" xml:space="preserve">
    <value>Creating new empty log file</value>
  </data>
  <data name="LogFileEmpty" xml:space="preserve">
    <value>Log file is empty</value>
  </data>
  <data name="NoRotateNotGTEMinimumFileSize" xml:space="preserve">
    <value>Will not rotate since log file is not greater than minimum file size</value>
  </data>
  <data name="ParseConfigFile" xml:space="preserve">
    <value>Parsing configuration file</value>
  </data>
  <data name="RotateBasedonFileSize" xml:space="preserve">
    <value>Rotate file based on file size</value>
  </data>
  <data name="RotateSimulated" xml:space="preserve">
    <value>Rotate will be simulated because Debug is true</value>
  </data>
  <data name="RotatingFile" xml:space="preserve">
    <value>Rotating file</value>
  </data>
  <data name="Setting" xml:space="preserve">
    <value>Setting</value>
  </data>
  <data name="TruncateLogFile" xml:space="preserve">
    <value>Truncating original log file</value>
  </data>
  <data name="UnknownDirective" xml:space="preserve">
    <value>Unknown directive</value>
  </data>
  <data name="UnknownSizeType" xml:space="preserve">
    <value>Unknown size type</value>
  </data>
  <data name="NewSection" xml:space="preserve">
    <value>new section</value>
  </data>
  <data name="ReadLine" xml:space="preserve">
    <value>read line</value>
  </data>
  <data name="SendingEmailTo" xml:space="preserve">
    <value>Sending email to</value>
  </data>
  <data name="LookingForFolders" xml:space="preserve">
    <value>Looking for folders found in</value>
  </data>
  <data name="MatchedFolder" xml:space="preserve">
    <value>Matched folder</value>
  </data>
  <data name="Matching" xml:space="preserve">
    <value>matching</value>
  </data>
  <data name="NoFilesFound" xml:space="preserve">
    <value>No files found in</value>
  </data>
  <data name="NoFoldersFound" xml:space="preserve">
    <value>No folders found in</value>
  </data>
  <data name="WithWildcardPattern" xml:space="preserve">
    <value>with wildcard pattern</value>
  </data>
</root>